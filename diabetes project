import numpy as np
import pandas as pd
from sklearn.preprocessing import StandardScaler#
from sklearn.model_selection import train_test_split
from sklearn import svm
from sklearn.metrics import accuracy_score

diab=pd.read_csv('/content/diab.csv')

diab.head()

diab.shape

diab.describe()

print(diab.columns)

X= diab.drop(columns='Outcome',axis=1)
Y= diab['Outcome']

print(X)

print(Y)

scaler=StandardScaler()

scaler.fit(X)

standardized_data=scaler.transform(X)

print(standardized_data)

X=standardized_data
Y=diab['Outcome']

print(X)

X_train,X_test,Y_train,Y_test=train_test_split(X,Y,test_size=0.2, stratify=Y, random_state=2)

print(X.shape,X_train.shape,X_test.shape)

#training model
classifier=svm.SVC(kernel='linear')

classifier.fit(X_train,Y_train)

X_train_prediction=classifier.predict(X_train)
training_data_accuracy=accuracy_score(x_train_prediction,Y_train)

print('accuracy score',training_data_accuracy)

X_test_prediction=classifier.predict(X_test)
test_data_accuracy=accuracy_score(X_test_prediction,Y_test)

print(test_data_accuracy)

#making prediction model
input_data=(1,189,60,23,846,30.1,0.398,59)
#changing the input to numpy array
input_data_as_numpy_array=np.asarray(input_data)
#reshape the array as we are predicting for one instance
input_data_reshaped=input_data_as_numpy_array.reshape(1,-1)
std_data=scaler.transform(input_data_reshaped)
print(std_data)
prediction=classifier.predict(std_data)
print(prediction)
if(prediction[0]==0):
  print('not diabetic')
else:
  print('diabetic')

